df$num.graphs = c(1, seq(nrow(df), 2 , by = -1))
df$network = c(replicate(nrow(df), o_name))
} else { #TODO multiple direction time-averaging
for(i in 1:(length(graphs)-index)) {
modelerrors2 = rbind(modelerrors2, calculate_model_error(time_average(graphs, index, index+i), datalist[[index]]))
}
for(i in 1:(index-1)) {
modelerrors2 = rbind(modelerrors2, calculate_model_error(time_average(graphs, i, index), datalist[[index]]))
}
}
}
ggsave("figures/null-models/Chaco/all_ta_me.pdf", plot_model_errors(modelerrors2, c("btwn_me", "eigen_me", "cc_me", "mod_me", "diam_me")), height = 4, width = 7)
source("scripts/Chaco-time-average.R")
theme_set(theme_minimal())
install.packages("adventr", dependencies = TRUE)
library(adventr)
library(adventr)
library(help = "datasets")
library(shiny)
library(shinythemes)
library(readxl)
diagnostics_list = as.data.frame(read_excel("C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/_Material studies framework.xlsx", skip = 1))
diagnostics_list = diagnostics_list[!is.na(diagnostics_list$`Drawing number`),]
diagnostics_list = diagnostics_list[!(diagnostics_list$`Drawing number` %in% c("DR-CS-6",  "DR-CS-32", "?", "DR-CS-3", "DR-CS-22", "DR-CS-21")),]
df_list = diagnostics_list[, c("type","Drawing number")]
pic_list = NULL
wd.list.i = "C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/Drawings/All Drawings"
for (i in 1:length(wd.list.i)) {
wd.i = wd.list.i[i]
files.i = unlist(list.files(wd.i))
list.i = cbind.data.frame(wd.i, files.i)
pic_list = rbind.data.frame(pic_list, list.i)
}
pic_list$files.i = as.character(pic_list$files.i)
pic_list$filename = substr(pic_list$files.i, 1, nchar(pic_list$files.i)-4)
pic_list$filetype = substr(pic_list$files.i, nchar(pic_list$files.i)-3, nchar(pic_list$files.i))
df_list$filename = ""
for (i in 1:dim(df_list)[1]) {
df_list$filename[i] = strsplit(df_list$`Drawing number`[i], split = ";")[[1]][1]
}
df_shiny = merge(df_list, pic_list, by = "filename")
df_shiny = df_shiny[order(df_shiny$type),]
df_shiny = df_shiny[,c("wd.i", "files.i", "type")]
df_shiny = na.omit(df_shiny)
# unique(df_shiny$type)
tbl = as.data.frame(table(df_shiny$type))
colnames(tbl) = c("type","obs")
listtypes = as.list(unique(df_shiny$type))
ui = tags$div(fluidPage(theme = shinytheme("journal"),
tabsetPanel(
tabPanel("Images",
fluidRow(
column(width = 12, align = "center",
selectInput("selectortype", h5("Select Type Variant"), choices = listtypes, multiple = FALSE)),
column(width = 4,
uiOutput('moreControls_c1')
),
column(width = 4,
uiOutput('moreControls_c2')
),
column(width = 4,
uiOutput('moreControls_c3')
)
)
),
tabPanel("Table",
column(width = 6,
tableOutput('tableTV'))
)
)))
server <- function(input, output, session) {
output$tableTV = renderTable(tbl)
filelist_selected = reactive({
df_shiny[which(df_shiny$type %in% as.character(input$selectortype)),]
})
grid_selected = reactive({
intdiv = dim(filelist_selected())[1]%/%3
modul = dim(filelist_selected())[1]%%3
sdlength_3 = intdiv
sdlength_2 = intdiv
sdlength_1 = intdiv
if (modul == 2) {
sdlength_2 = intdiv + 1
sdlength_1 = intdiv + 1
} else if (modul == 1) {
sdlength_2 = intdiv
sdlength_1 = intdiv + 1
}
returns = list(sdlength_1, sdlength_2, sdlength_3)
return(returns)
})
output$moreControls_c1 = renderUI({
lapply(1:grid_selected()[[1]], function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
observeEvent(grid_selected(), {
if (grid_selected()[[2]]>0) {
output$moreControls_c2 = renderUI({
lapply((grid_selected()[[1]]+1):(grid_selected()[[1]]+grid_selected()[[2]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c2 = NULL
}
})
observeEvent(grid_selected(), {
if (grid_selected()[[3]]>0) {
output$moreControls_c3 = renderUI({
lapply((grid_selected()[[1]]+grid_selected()[[2]]+1):(grid_selected()[[1]]+grid_selected()[[2]]+grid_selected()[[3]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c3 = NULL
}
})
}
shinyApp(ui, server)
# environment
rm(list=ls())
library(shiny); runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
library(shiny); runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
rm(list = ls())
runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
rm(list = ls())
runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
diagnostics_list = as.data.frame(read_excel("C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/_Material studies framework.xlsx", skip = 1))
diagnostics_list = as.data.frame(read_excel("C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/_Material studies framework.xlsx", skip = 1))
diagnostics_list = diagnostics_list[!is.na(diagnostics_list$`Drawing number`),]
diagnostics_list = diagnostics_list[!(diagnostics_list$`Drawing number` %in% c("DR-CS-6",  "DR-CS-32", "?", "DR-CS-3", "DR-CS-22", "DR-CS-21")),]
df_list = diagnostics_list[, c("type","Drawing number")]
pic_list = NULL
wd.list.i = "C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/Drawings/All Drawings"
for (i in 1:length(wd.list.i)) {
wd.i = wd.list.i[i]
files.i = unlist(list.files(wd.i))
list.i = cbind.data.frame(wd.i, files.i)
pic_list = rbind.data.frame(pic_list, list.i)
}
pic_list$files.i = as.character(pic_list$files.i)
pic_list$filename = substr(pic_list$files.i, 1, nchar(pic_list$files.i)-4)
pic_list$filetype = substr(pic_list$files.i, nchar(pic_list$files.i)-3, nchar(pic_list$files.i))
df_list$filename = ""
for (i in 1:dim(df_list)[1]) {
df_list$filename[i] = strsplit(df_list$`Drawing number`[i], split = ";")[[1]][1]
}
df_shiny = merge(df_list, pic_list, by = "filename")
df_shiny = df_shiny[order(df_shiny$type),]
df_shiny = df_shiny[,c("wd.i", "files.i", "type")]
df_shiny = na.omit(df_shiny)
# unique(df_shiny$type)
tbl = as.data.frame(table(df_shiny$type))
colnames(tbl) = c("type","obs")
listtypes = as.list(unique(df_shiny$type))
ui = tags$div(fluidPage(theme = shinytheme("journal"),
tabsetPanel(
tabPanel("Images",
fluidRow(
column(width = 12, align = "center",
selectInput("selectortype", h5("Select Type Variant"), choices = listtypes, multiple = FALSE)),
column(width = 4,
uiOutput('moreControls_c1')
),
column(width = 4,
uiOutput('moreControls_c2')
),
column(width = 4,
uiOutput('moreControls_c3')
)
)
),
tabPanel("Table",
column(width = 6,
tableOutput('tableTV'))
)
)))
server <- function(input, output, session) {
output$tableTV = renderTable(tbl)
filelist_selected = reactive({
df_shiny[which(df_shiny$type %in% as.character(input$selectortype)),]
})
grid_selected = reactive({
intdiv = dim(filelist_selected())[1]%/%3
modul = dim(filelist_selected())[1]%%3
sdlength_3 = intdiv
sdlength_2 = intdiv
sdlength_1 = intdiv
if (modul == 2) {
sdlength_2 = intdiv + 1
sdlength_1 = intdiv + 1
} else if (modul == 1) {
sdlength_2 = intdiv
sdlength_1 = intdiv + 1
}
returns = list(sdlength_1, sdlength_2, sdlength_3)
return(returns)
})
output$moreControls_c1 = renderUI({
lapply(1:grid_selected()[[1]], function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
observeEvent(grid_selected(), {
if (grid_selected()[[2]]>0) {
output$moreControls_c2 = renderUI({
lapply((grid_selected()[[1]]+1):(grid_selected()[[1]]+grid_selected()[[2]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c2 = NULL
}
})
observeEvent(grid_selected(), {
if (grid_selected()[[3]]>0) {
output$moreControls_c3 = renderUI({
lapply((grid_selected()[[1]]+grid_selected()[[2]]+1):(grid_selected()[[1]]+grid_selected()[[2]]+grid_selected()[[3]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c3 = NULL
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(readxl)
diagnostics_list = as.data.frame(read_excel("C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/_Material studies framework.xlsx", skip = 1))
diagnostics_list = diagnostics_list[!is.na(diagnostics_list$`Drawing number`),]
diagnostics_list = diagnostics_list[!(diagnostics_list$`Drawing number` %in% c("DR-CS-6",  "DR-CS-32", "?", "DR-CS-3", "DR-CS-22", "DR-CS-21")),]
df_list = diagnostics_list[, c("type","Drawing number")]
df_list = diagnostics_list[, c("type","drawing_number")]
pic_list = NULL
wd.list.i = "C:/Users/daems/OneDrive/Work/Research/Material studies/Sagalassos/Drawings/All Drawings"
for (i in 1:length(wd.list.i)) {
wd.i = wd.list.i[i]
files.i = unlist(list.files(wd.i))
list.i = cbind.data.frame(wd.i, files.i)
pic_list = rbind.data.frame(pic_list, list.i)
}
pic_list$files.i = as.character(pic_list$files.i)
pic_list$filename = substr(pic_list$files.i, 1, nchar(pic_list$files.i)-4)
pic_list$filetype = substr(pic_list$files.i, nchar(pic_list$files.i)-3, nchar(pic_list$files.i))
df_list$filename = ""
for (i in 1:dim(df_list)[1]) {
df_list$filename[i] = strsplit(df_list$`Drawing number`[i], split = ";")[[1]][1]
}
df_shiny = merge(df_list, pic_list, by = "filename")
df_shiny = df_shiny[order(df_shiny$type),]
df_shiny = df_shiny[,c("wd.i", "files.i", "type")]
df_shiny = na.omit(df_shiny)
# unique(df_shiny$type)
tbl = as.data.frame(table(df_shiny$type))
colnames(tbl) = c("type","obs")
listtypes = as.list(unique(df_shiny$type))
ui = tags$div(fluidPage(theme = shinytheme("journal"),
tabsetPanel(
tabPanel("Images",
fluidRow(
column(width = 12, align = "center",
selectInput("selectortype", h5("Select Type Variant"), choices = listtypes, multiple = FALSE)),
column(width = 4,
uiOutput('moreControls_c1')
),
column(width = 4,
uiOutput('moreControls_c2')
),
column(width = 4,
uiOutput('moreControls_c3')
)
)
),
tabPanel("Table",
column(width = 6,
tableOutput('tableTV'))
)
)))
server <- function(input, output, session) {
output$tableTV = renderTable(tbl)
filelist_selected = reactive({
df_shiny[which(df_shiny$type %in% as.character(input$selectortype)),]
})
grid_selected = reactive({
intdiv = dim(filelist_selected())[1]%/%3
modul = dim(filelist_selected())[1]%%3
sdlength_3 = intdiv
sdlength_2 = intdiv
sdlength_1 = intdiv
if (modul == 2) {
sdlength_2 = intdiv + 1
sdlength_1 = intdiv + 1
} else if (modul == 1) {
sdlength_2 = intdiv
sdlength_1 = intdiv + 1
}
returns = list(sdlength_1, sdlength_2, sdlength_3)
return(returns)
})
output$moreControls_c1 = renderUI({
lapply(1:grid_selected()[[1]], function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
observeEvent(grid_selected(), {
if (grid_selected()[[2]]>0) {
output$moreControls_c2 = renderUI({
lapply((grid_selected()[[1]]+1):(grid_selected()[[1]]+grid_selected()[[2]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c2 = NULL
}
})
observeEvent(grid_selected(), {
if (grid_selected()[[3]]>0) {
output$moreControls_c3 = renderUI({
lapply((grid_selected()[[1]]+grid_selected()[[2]]+1):(grid_selected()[[1]]+grid_selected()[[2]]+grid_selected()[[3]]), function(i) {
renderImage({
return(list(
src = paste0(filelist_selected()$wd.i[i], "/", filelist_selected()$files.i[i]),
width = 500,
alt = as.character(filelist_selected()$files.i[i])
))
}, deleteFile = FALSE)
}
)
})
} else {
output$moreControls_c3 = NULL
}
})
}
shinyApp(ui, server)
rm(list = ls())
runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
rm(list = ls())
runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
rm(list = ls())
runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
rm(list = ls())
library(shiny); runApp('C:/Users/daems/OneDrive/Work/Code/pottery/shinyApp_pottery-images-per-type.R')
ggplot(data = dfplot2) +
aes(x = as.numeric(timestep), y = as.numeric(value), color = as.factor(variable)) +
geom_boxplot() +
theme_bw() + geom_point(alpha = 0.5, size = 1, stroke = 1, position = jitterpos)  +
labs(x = "Timestep",
y = 'Food harvest') +
theme(legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey80"),
axis.text.x = element_text(color = "grey10", size = 8, face = "plain"),
axis.text.y = element_text(color = "grey10", size = 10, face = "plain"),
axis.title.x = element_text(color = "grey10", size = 8, face = "italic"),
axis.title.y = element_text(color = "grey10", size = 10, face = "italic")) +
scale_colour_manual(values = rep('#77777a', 15))
library(ggplot2)
ggplot(data = dfplot2) +
aes(x = as.numeric(timestep), y = as.numeric(value), color = as.factor(variable)) +
geom_boxplot() +
theme_bw() + geom_point(alpha = 0.5, size = 1, stroke = 1, position = jitterpos)  +
labs(x = "Timestep",
y = 'Food harvest') +
theme(legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey80"),
axis.text.x = element_text(color = "grey10", size = 8, face = "plain"),
axis.text.y = element_text(color = "grey10", size = 10, face = "plain"),
axis.title.x = element_text(color = "grey10", size = 8, face = "italic"),
axis.title.y = element_text(color = "grey10", size = 10, face = "italic")) +
scale_colour_manual(values = rep('#77777a', 15))
rm(list=ls())
setwd('C:/Users/daems/OneDrive/Work/Code/GitHub/Resoc/Results')
library(readxl)
library(reshape2)
food_prod <- read_excel("ResEx regeneration-time-table.xlsx")
food_prep <- food_prod[-c(1:8),]
food_prep2 <- food_prep[-c(2)]
food_prep3 <- subset(food_prep2, ...3 != '0')
colnames(food_prep3) <- c('run', 'timestep', 'community_0', 'community_1', 'community_2', 'community_3', 'community_4', 'community_5',
'community_6', 'community_7', 'community_8', 'community_9', 'community_10', 'community_11', 'community_12', 'community_13',
'community_14')
dfplot2 <- reshape2::melt(food_prep3, id.vars = c("timestep", 'run'))
ggplot(data = dfplot2) +
aes(x = as.numeric(timestep), y = as.numeric(value), color = as.factor(variable)) +
geom_boxplot() +
theme_bw() + geom_point(alpha = 0.5, size = 1, stroke = 1, position = jitterpos)  +
labs(x = "Timestep",
y = 'Food harvest') +
theme(legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey80"),
axis.text.x = element_text(color = "grey10", size = 8, face = "plain"),
axis.text.y = element_text(color = "grey10", size = 10, face = "plain"),
axis.title.x = element_text(color = "grey10", size = 8, face = "italic"),
axis.title.y = element_text(color = "grey10", size = 10, face = "italic")) +
scale_colour_manual(values = rep('#77777a', 15))
jitterpos = position_jitter(width = 0.2, height = 0, seed = 1)
ggplot(data = dfplot2) +
aes(x = as.numeric(timestep), y = as.numeric(value), color = as.factor(variable)) +
geom_boxplot() +
theme_bw() + geom_point(alpha = 0.5, size = 1, stroke = 1, position = jitterpos)  +
labs(x = "Timestep",
y = 'Food harvest') +
theme(legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey80"),
axis.text.x = element_text(color = "grey10", size = 8, face = "plain"),
axis.text.y = element_text(color = "grey10", size = 10, face = "plain"),
axis.title.x = element_text(color = "grey10", size = 8, face = "italic"),
axis.title.y = element_text(color = "grey10", size = 10, face = "italic")) +
scale_colour_manual(values = rep('#77777a', 15))
ggplot(data = dfplot2) +
aes(x = as.numeric(timestep), y = as.numeric(value), color = as.factor(variable)) +
facet_wrap(vars(as.numeric(run))) +
geom_line(size = 0.1) +
# geom_point() +
labs(x = "Timestep",
y = 'Food harvest') +
theme(legend.position = "none",
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "grey80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "grey80"),
axis.text.x = element_text(color = "grey10", size = 8, face = "plain"),
axis.text.y = element_text(color = "grey10", size = 10, face = "plain"),
axis.title.x = element_text(color = "grey10", size = 8, face = "italic"),
axis.title.y = element_text(color = "grey10", size = 10, face = "italic")) +
scale_colour_manual(values = rep('#77777a', 15))
